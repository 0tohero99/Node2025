https://code.visualstudio.com/   > Install
https://nodejs.org/en > Install
https://git-scm.com/downloads > Install
https://github.com/ > SignUp
https://github.com/Aakashdeveloper > Follow

vscode extension
>vscode-icons


JavaScript
ifelse,function,object,JSON,variables,Array


===================Day_1======================
https://endoflife.date/ 
Always install even version no (i.e. LTS)
odd version no is BETA version .
https://survey.stackoverflow.co/2024/technology/

  M     E       R    N     Stack .
Mongo Express React Node  .
    Express.js is a fast, flexible, web framework for Node.js that helps in building backend APIs and servers.

        What does Express.js do?
            Creates Web Servers тАУ Helps run a website or backend service.
            Handles Routes тАУ Decides what to do when users visit different URLs (like /home or /about).
            Uses Middleware тАУ Processes user requests before sending a response.
            Builds APIs тАУ Helps create RESTful APIs for apps and websites.
            Connects to Databases тАУ Works with databases like MongoDB and MySQL.

Nodejs : A tool to run JavaScript on a server .

    Single-Threaded : Works with one main thread (e.g., like a single waiter handling many tables).

    Asyncronous : Starts a task and moves to the next without waiting (e.g., ordering food and doing other work while it cooks).

    Non-Blocking I/O: Handles multiple tasks at once without stopping (e.g., a chef cooking many dishes at the same time).


Single-Threaded ( Runs One Line of Code at a Time )
        It runs all tasks using one main thread. It executes one line of code at a time.

Example:
    console.log("Step 1");
    console.log("Step 2");
    console.log("Step 3");
Output:
    Step 1  
    Step 2  
    Step 3  
It runs one after another without creating extra threads.

> Asyncronous :
It doesnтАЩt wait for long-running tasks (like file reading or API calls).
It moves to the next task and handles the result later when it's ready. 

Example :
    console.log("Start");

    setTimeout(() => {
    console.log("Done!");
    }, 3000);

    console.log("Keep Going...");

Output:
    Start  
    Keep Going...  
    Done! (after 3 seconds)
      
ЁЯФ╣ The program doesn't wait for setTimeout.
ЁЯФ╣ It keeps running other code.
ЁЯФ╣ "Done!" appears after 3 seconds when it's ready.

> Non-Blocking I/O (Processes Data Without Waiting)
When It performs time-consuming tasks (like reading a file), it doesn't block the rest of the program.

Example (Real Life)
    ЁЯНФ You order a burger at a restaurant. Instead of waiting at the counter, you find a seat and use your phone.
    When the burger is ready, the waiter brings it to you.

    This is Non-Blocking I/O тАУ no waiting, just efficiency

Code Example (Same Concept)

    const fs = require("fs");

    console.log("Reading file...");

    fs.readFile("test.txt", "utf8", (err, data) => {
    console.log("File content:", data);
    });

    console.log("Doing other work...");
Output:

    Reading file...  
    Doing other work...  
    File content: (file data)  

тЬЕ It doesnтАЩt wait for the file to load.
тЬЕ It keeps doing other work.
тЬЕ When the file is ready, it prints the content.

NPM : Node Pakages Manager : is a registary that helps in installing, updating, and managing JavaScript packages.

Pakages: are the suporting library.

JSON : format to represent the data .
    > JavaScript Object Notation : Array of obzect .
        [
             {
                name:"Hero",
                type:"Romantic",
                ind:"Bollywood"
             },
             {
                name:"Jab We Met",
                type:"Romantic",
                ind:"Bollywood"
             }
        ]
    
package.json:
    >this is the entry point to the app
    >it contain metadata(version,description,name package)
    >it contain script(start,test)
    >all the packages 

 
//step to generate package.json
    NodejS must be installed in laptop
    > go inside the folder using cmd/terminal
    > type npm init
    > answer all questions
    > type YES

create automatically package.json if dont want to answer any que. 
    npm init -you


3 types of dependancies:
    local dep : local to the folder.
        npm i pakagename 
global :
dev :

===================Day_2======================
cd %UserProfile%\Desktop
рдкрд╣рд▓реЗ рдпрд╣ рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдХреМрди-рдХреМрди рд╕реЗ рдкреНрд░реЛрд╕реЗрд╕ TCP рдФрд░ UDP рдкреЛрд░реНрдЯреНрд╕ рдкрд░ рд░рди рдХрд░ рд░рд╣реЗ рд╣реИрдВ:
netstat -ano
рдЕрдЧрд░ рдЖрдкрдХреЛ рд╕рд┐рд░реНрдл TCP рдХрдиреЗрдХреНрд╢рдиреНрд╕ рджреЗрдЦрдиреЗ рд╣реИрдВ, рддреЛ:
netstat -ano | findstr LISTENING
рдЕрдЧрд░ рдЖрдкрдХреЛ UDP рдХрдиреЗрдХреНрд╢рдиреНрд╕ рджреЗрдЦрдиреЗ рд╣реИрдВ, рддреЛ:
netstat -ano | findstr UDP
рд╕рднреА TCP рдФрд░ UDP рдкреНрд░реЛрд╕реЗрд╕ рдХреЛ рдПрдХ рд╕рд╛рде рдмрдВрдж рдХрд░реЗрдВ (CMD рд╕реЗ)
for /f "tokens=5" %a in ('netstat -ano ^| findstr LISTENING') do taskkill /PID %a /F
рд╕рднреА UDP рдкреНрд░реЛрд╕реЗрд╕ рдХреЛ рдмрдВрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдПрдВ:
for /f "tokens=5" %a in ('netstat -ano ^| findstr UDP') do taskkill /PID %a /F
1я╕ПтГг рдпрд╣ рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреЛрдИ рднреА Node.js рд╕рд░реНрд╡рд░ рд░рди рд╣реЛ рд░рд╣рд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВ:
tasklist | findstr node
ЁЯФ╣ рдЕрдЧрд░ рдХреБрдЫ рднреА рдирд╣реАрдВ рджрд┐рдЦрддрд╛, рддреЛ рдЗрд╕рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдХреЛрдИ рднреА Node.js рд╕рд░реНрд╡рд░ рдЗрд╕ рд╕рдордп рд░рди рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ред

1я╕ПтГг Task Manager рдЦреЛрд▓реЗрдВ
ЁЯФ╣ Ctrl + Shift + Esc рджрдмрд╛рдПрдВ
ЁЯФ╣ Ctrl + Alt + Delete рджрдмрд╛рдПрдВ рдФрд░ Task Manager рдЪреБрдиреЗрдВ

2я╕ПтГг Processes рдЯреИрдм рдкрд░ рдЬрд╛рдПрдВ
ЁЯФ╣ рдЕрдЧрд░ Task Manager Compact Mode рдореЗрдВ рдЦреБрд▓рд╛ рд╣реИ, рддреЛ "More details" рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред

ЁЯФ╣ "Node.js", "node.exe", "Apache", "MongoDB", "MySQL" рдпрд╛ рдЖрдкрдХреЗ рдЪрд▓ рд░рд╣реЗ рд╕рд░реНрд╡рд░ рдХрд╛ рдирд╛рдо рджреЗрдЦреЗрдВред
ЁЯФ╣ рдХрднреА-рдХрднреА node.exe рдпрд╛ java.exe рдЬреИрд╕реЗ рдирд╛рдо рд╕реЗ рднреА рд╣реЛ рд╕рдХрддрд╛ рд╣реИред

4я╕ПтГг рд╕рд░реНрд╡рд░ рдХреЛ рдмрдВрдж рдХрд░реЗрдВ (Kill Process)
ЁЯФ╣ рд╕рд░реНрд╡рд░ рд╡рд╛рд▓реЗ рдкреНрд░реЛрд╕реЗрд╕ рдкрд░ рд░рд╛рдЗрдЯ-рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ
ЁЯФ╣ "End Task" рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ

5я╕ПтГг рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд╕рд░реНрд╡рд░ рдмрдВрдж рд╣реЛ рдЧрдпрд╛ рд╣реИ
ЁЯФ╣ рдлрд┐рд░ рд╕реЗ CMD рдореЗрдВ netstat -ano | findstr :9800 рдЪрд▓рд╛рдПрдВ рдФрд░ рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдкреЛрд░реНрдЯ рдлреНрд░реА рд╣реЛ рдЧрдпрд╛ рдпрд╛ рдирд╣реАрдВред

Step 1: рдкрд╣рд▓реЗ рд╕рднреА рдПрдХреНрдЯрд┐рд╡ рдкреЛрд░реНрдЯреНрд╕ рджреЗрдЦреЗрдВ
netstat -ano
рдЬрд┐рд╕ рдкреЛрд░реНрдЯ рдХреЛ рдмрдВрдж рдХрд░рдирд╛ рд╣реИ, рдЙрд╕рдХрд╛ PID рдирд┐рдХрд╛рд▓реЗрдВ
рдЕрдЧрд░ рдЖрдкрдХреЛ рдХрд┐рд╕реА рдЦрд╛рд╕ рдкреЛрд░реНрдЯ (рдЬреИрд╕реЗ 9800) рдкрд░ рд░рди рд╣реЛ рд░рд╣реЗ рдкреНрд░реЛрд╕реЗрд╕ рдХреЛ рдмрдВрдж рдХрд░рдирд╛ рд╣реИ, рддреЛ рдЪрд▓рд╛рдПрдВ:
netstat -ano | findstr :9800
Step 3: рдЙрд╕ PID рдХреЛ рдмрдВрдж рдХрд░реЗрдВ
taskkill /PID 1234 /F
ЁЯФ╣ рдпрд╣рд╛рдВ 1234 рдХреЛ рдЕрдкрдиреЗ PID рд╕реЗ рдмрджрд▓реЗрдВред
wmic process where "ProcessId=1234" delete

==============================================

dev dependancies : 
    Those we require only at the time of development .
    npm i 

apis : it is a url that consists the json format of data . 
rest apis bcz : here every req. act like a new req . 

Static apis : That will not interect with the database .

http :handling the routw is v difficult so we should work with express it helps to create the route very easiyly. 

nodemon :it aotomatically detect the chnage and restart server . bcz everytime we make change in the file to see the resullt we have to stop start the server . 

install it globally :it will be there in the laptop it can be used by any aplications.
    #install : 
    cmd as admin
    npm i -g nodemon

"scripts": {
    "start": "node http.js",
    "dev": "nodemon http.js"
 },
 #Run: 
    npm run dev 
 
    -----------fullstack----------------
create aplications :
    create folder
    npm init -y
    npm i express
    .gitignore
    readme.md


CRUD
Create Read Update Delete

Post   Get  Put    Delete

Post> insert data in database
Get > Retrive the data
Put/Patch > Update the records
Delete > Remove

 рдЬрдм GET рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдЖрддреА рд╣реИ, рддреЛ рд╕рд░реНрд╡рд░ рд╕реЗ рдХрд╣рд╛ рдЬрд╛рддрд╛ рд╣реИ:
   "рдбреЗрдЯрд╛ рдХреЛ рдкрдврд╝реЛ рдФрд░ рднреЗрдЬреЛред"
ЁЯФ╣ POST: "рдирдпрд╛ рдбреЗрдЯрд╛ рдЬреЛрдбрд╝реЛред"
ЁЯФ╣ PUT/PATCH: "рдореМрдЬреВрджрд╛ рдбреЗрдЯрд╛ рдЕрдкрдбреЗрдЯ рдХрд░реЛред"
ЁЯФ╣ DELETE: "рдбреЗрдЯрд╛ рд╣рдЯрд╛рдУред"
res.send() рдХрд╛ рдорддрд▓рдм рд╣реИ тАУ "рд╕рд░реНрд╡рд░ рд╕реЗ рдХреНрд▓рд╛рдЗрдВрдЯ (рдпреВрдЬрд╝рд░) рдХреЛ рдЬрд╡рд╛рдм рднреЗрдЬрдирд╛"ред
req рдХрд╛ рдорддрд▓рдм рд╣реИ тАУ "рдХреНрд▓рд╛рдЗрдВрдЯ (рдпреВрдЬрд╝рд░) рд╕реЗ рд╕рд░реНрд╡рд░ рдХреЛ рднреЗрдЬреА рдЧрдИ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ"ред


var a = 10
var b = "My Age is "+a
"My Age is 10"

//es6
var a = 10
var b = `My age is ${a}`
"My Age is 10"

